# global !p
# from snippet_helpers import *
# endglobal

snippet cl "console.log(...)" b
console.log($0)
endsnippet

snippet fun "function with dynamic docblock" b
`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.
def formatTag(argument):
	return " * @param {{}} {0}".format(argument)

arguments = t[2].split(',')
arguments = [argument.strip() for argument in arguments if argument]

if len(arguments):
  tags = map(formatTag, arguments)
  snip.rv = "/**"
  for tag in tags:
    snip += tag
  snip += ' */'
  snip += ''
else:
  snip.rv = ''
`function ${1} (${2}) {
  ${0:${VISUAL}}
}
endsnippet

snippet /**
/**
 * ${0:${VISUAL}}
 */
endsnippet

snippet par "@param {...}"
@param {${1:type}} ${0:name description}
endsnippet

snippet ret "@returns {...}"
@returns {${1:type}} ${0}
endsnippet

snippet mep "module.exports ="
module.exports = ${0}
endsnippet

# Doesn't support calling another snippet yet. So I will have to duplicate.
snippet mepp "function foo () { ... } module.exports = foo"
`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.
def formatTag(argument):
	return " * @param {{}} {0}".format(argument)

arguments = t[2].split(',')
arguments = [argument.strip() for argument in arguments if argument]

if len(arguments):
  tags = map(formatTag, arguments)
  snip.rv = "/**"
  for tag in tags:
    snip += tag
  snip += ' */'
  snip += ''
else:
  snip.rv = ''
`function ${1} (${2}) {
  ${0:${VISUAL}}
}
`!p
fname = t[1]

if len(fname):
  snip += "module.exports = {0}".format(fname)
`
endsnippet

snippet iife "(function () { 'use strict'; ... })();"
(function () {
  'use strict';

	${0}
})();
endsnippet

snippet des "describe('...', function () { ... })"
describe('${1:${VISUAL}}', function () {
  it('${2}', function () {
		${0}
	})
})
endsnippet

snippet test "test('...', (t) => { ... })"
test('${1:${VISUAL}}', (t) => {
  t.plan(${2})

	${0}
})
endsnippet

snippet tape "const test = require('tape')"
const test = require('tape')
endsnippet

snippet sinon "const sinon = require('sinon')"
const sinon = require('sinon')
endsnippet

snippet stub.ret "sinon.stub().returns(...)"
sinon.stub().returns(${0})
endsnippet

snippet proxyquire "const proxyquire = require('proxyquire')"
const proxyquire = require('proxyquire')
endsnippet

snippet require "assign a CommonJS-style module to a const"
const ${0:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/$2/g}} = require('${1}')
endsnippet

snippet /class/ "Creates a new class" !rb
export class $1 {
  constructor ($2) {
		$0
	}
}
endsnippet
